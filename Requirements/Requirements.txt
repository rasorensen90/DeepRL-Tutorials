pyhton 3.7, MPI (openmpi see mpi4py documentation) and CUDA 10.2
conda install tensorflow
conda install matplotlib
conda install networkx
conda install mpi4py
pip install gym
pip install baselines
conda update --all

conda install pytorch torchvision cpuonly -c pytorch // https://pytorch.org/
conda install pytorch torchvision cudatoolkit=10.2 -c pytorch

https://docs.dgl.ai/install/index.html
conda install -c dglteam dgl-cuda10.2

https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html
pip install torch-scatter==latest+cu102 -f https://pytorch-geometric.com/whl/torch-1.5.0.html
pip install torch-sparse==latest+cu102 -f https://pytorch-geometric.com/whl/torch-1.5.0.html
pip install torch-cluster==latest+cu102 -f https://pytorch-geometric.com/whl/torch-1.5.0.html
pip install torch-spline-conv==latest+cu102 -f https://pytorch-geometric.com/whl/torch-1.5.0.html
pip install torch-geometric

conda install jupyterlab

CHANGE BASELINES MONITOR.PY STEP FUNCTION LINE 57-78:
Anaconda3\envs\BHS_Pytorch\Lib\site-packages\baselines\bench\monitor.py

    def step(self, action):
        if self.needs_reset:
            raise RuntimeError("Tried to step environment that needs reset")
        ob, rew, done, info, actual_action = self.env.step(action)
        self.rewards.append(rew)
        if done:
            self.needs_reset = True
            eprew = sum(self.rewards)
            eplen = len(self.rewards)
            epinfo = {"r": round(eprew, 6), "l": eplen, "t": round(time.time() - self.tstart, 6)}
            for k in self.info_keywords:
                epinfo[k] = info[k]
            self.episode_rewards.append(eprew)
            self.episode_lengths.append(eplen)
            self.episode_times.append(time.time() - self.tstart)
            epinfo.update(self.current_reset_info)
            if self.logger:
                self.logger.writerow(epinfo)
                self.f.flush()
            info['episode'] = epinfo
        self.total_steps += 1
        return (ob, rew, done, info, actual_action)


CHANGE TORCH GEOMETRIC GAT_CONV.PY FORWARD FUNCTION LINE 122-127:
Anaconda3\envs\BHS_Pytorch\Lib\site-packages\torch_geometric\nn\conv
	if isinstance(x, Tensor):
            assert x.dim() == 2, 'Static graphs not supported in `GATConv`.'
            x_l = self.lin_l(x).view(-1, H, C)
            alpha_l = (x_l * self.att_l).sum(dim=-1)
            x_r = self.lin_r(x).view(-1, H, C)
            alpha_r = (x_r * self.att_r).sum(dim=-1)